from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes

from database import get_nearest_eat_location, get_another_nearest_eat_location, get_top_rated_eat_location
from place_card_formatter import send_place_card


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text('–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/start - –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n/help - –ø–æ–º–æ—â—å')


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç!\n'
        '–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ —Å–∞–º—ã–µ –≤–∫—É—Å–Ω—ã–µ –º–µ—Å—Ç–∞.\n'
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.',
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", request_location=True)]],
            resize_keyboard=True
        )
    )


async def request_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º:',
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", request_location=True)]],
            resize_keyboard=True
        )
    )


async def update_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    location_button = KeyboardButton("üìç–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", request_location=True)
    sort_button = KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É")
    reply_markup = ReplyKeyboardMarkup([[location_button], [sort_button]], resize_keyboard=True)

    await update.message.reply_text(
        'üìç–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—ë –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, –∏ —è –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è –ª—É—á—à–∏–µ –∫–∞—Ñ–µ –∏ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã!',
        reply_markup=reply_markup)


async def show_sort_options(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_data = context.user_data
    current_sort = user_data.get('sort_by', 'distance')

    nearby_button = KeyboardButton("üîç –ü–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é" + (" ‚úÖ" if current_sort == 'distance' else ""))
    rating_button = KeyboardButton("‚≠ê –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É" + (" ‚úÖ" if current_sort == 'rating' else ""))
    back_button = KeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    reply_markup = ReplyKeyboardMarkup([[nearby_button, rating_button], [back_button]], resize_keyboard=True)

    await update.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏',
        reply_markup=reply_markup
    )


async def handle_sort_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text
    user_data = context.user_data

    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update_location(update, context)
        return

    if 'last_location' not in user_data:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]],
                resize_keyboard=True
            )
        )
        return

    lat, lon = user_data['last_location']

    if text.startswith("üîç –ü–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é"):
        user_data['sort_by'] = 'distance'
        user_data['shown_place_ids'] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        nearest = get_nearest_eat_location(lat, lon)
        if nearest:
            user_data['shown_place_ids'] = [nearest.id]
            await send_place_card(update, context, nearest)
        await show_main_menu(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

    elif text.startswith("‚≠ê –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É"):
        user_data['sort_by'] = 'rating'
        user_data['shown_place_ids'] = []  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
        top_rated = get_top_rated_eat_location(lat, lon)
        if top_rated:
            user_data['shown_place_ids'] = [top_rated.id]
            await send_place_card(update, context, top_rated)
        await show_main_menu(update, context)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é


async def handle_new_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    location = update.message.location
    context.user_data['last_location'] = (location.latitude, location.longitude)
    context.user_data['shown_place_ids'] = []
    context.user_data['sort_by'] = 'distance'  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è
    await show_main_menu(update, context)


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    user_data = context.user_data
    current_sort = user_data.get('sort_by', 'distance')
    sort_text = "–í—ã–±—Ä–∞–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: üîç –ü–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é" if current_sort == 'distance' else "–í—ã–±—Ä–∞–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: ‚≠ê –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É"

    menu_buttons = [
        ["üîç –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ"],
        ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É", "üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"]
    ]
    await update.message.reply_text(
        f"{sort_text} \n–ù–∞–π–¥–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–∫—É—Å–∏—Ç—å?",
        reply_markup=ReplyKeyboardMarkup(menu_buttons, resize_keyboard=True)
    )


async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = update.message.text

    if text == "üîç –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ":
        await handle_find_another_place(update, context)
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É":
        await show_sort_options(update, context)
    elif text == "üóëÔ∏è –°–±—Ä–æ—Å–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ":
        await reset_location(update, context)
    elif 'last_location' not in context.user_data:
        await request_location(update, context)
    else:
        await show_main_menu(update, context)


async def reset_location(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏
    context.user_data.pop('last_location', None)
    context.user_data.pop('shown_place_ids', None)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ
    await update.message.reply_text(
        "–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìç –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º", request_location=True)]],
            resize_keyboard=True
        )
    )


async def handle_find_another_place(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data = context.user_data

    if 'last_location' not in user_data:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]],
                resize_keyboard=True
            )
        )
        return

    lat, lon = user_data['last_location']
    shown_ids = user_data.get('shown_place_ids', [])
    sort_by = user_data.get('sort_by', 'distance')  # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

    if sort_by == 'distance':
        new_place = get_another_nearest_eat_location(lat, lon, shown_ids)
    else:
        new_place = get_top_rated_eat_location(lat, lon, excluded_ids=shown_ids)

    if new_place:
        user_data['shown_place_ids'] = shown_ids + [new_place.id]
        await send_place_card(update, context, new_place)
    else:
        await update.message.reply_text(
            "–í—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª–∏ –≤—Å–µ –º–µ—Å—Ç–∞ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏. –•–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ?",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]],
                resize_keyboard=True
            )
        )